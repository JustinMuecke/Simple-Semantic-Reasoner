plugins {
    id 'java'
    id "com.google.protobuf" version "0.9.4"
    id "org.sonarqube" version "5.0.0.4638"
    id "jacoco"
}

group 'org.example'

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // OWL API Interfaces
    // https://mvnrepository.com/artifact/net.sourceforge.owlapi/owlapi-api
    implementation group: 'net.sourceforge.owlapi', name: 'owlapi-api', version: '5.5.0'

    // https://mvnrepository.com/artifact/net.sourceforge.owlapi/owlapi-parsers
    implementation group: 'net.sourceforge.owlapi', name: 'owlapi-parsers', version: '5.5.0'

    // https://mvnrepository.com/artifact/net.sourceforge.owlapi/owlapi-apibinding
    implementation group: 'net.sourceforge.owlapi', name: 'owlapi-apibinding', version: '5.5.0'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.3'
// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.12'




    implementation 'com.google.protobuf:protobuf-java:3.6.1'
    implementation 'io.grpc:grpc-stub:1.15.1'
    implementation 'io.grpc:grpc-protobuf:1.15.1'
    // https://mvnrepository.com/artifact/io.grpc/grpc-netty
    implementation group: 'io.grpc', name: 'grpc-netty', version: '1.61.0'

    if (JavaVersion.current().isJava9Compatible()) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        implementation 'javax.annotation:javax.annotation-api:1.3.1'
    }

    // Extra proto source files besides the ones residing under
    // "src/main".


    testImplementation 'junit:junit:4.12'

}

test {
    useJUnitPlatform()
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 9000
        jmx = false
    }
}

sonar {
    properties {
        property "sonar.projectKey", "SSWR"
        property "sonar.projectName", "SSWR"
        property "sonar.token", "sqp_55702a87a6d031e54015f5ce3d5903c4fe8fa87a"
    }
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}